{"version":3,"file":"818.js","mappings":"gQAWIA,EAAU,GAEdA,EAAQC,kBAAoB,IAC5BD,EAAQE,cAAgB,IAElBF,EAAQG,OAAS,SAAc,KAAM,QAE3CH,EAAQI,OAAS,IACjBJ,EAAQK,mBAAqB,IAEhB,IAAI,IAASL,GAKnB,QAAe,KAAW,WAAiB,gBAAiBM,ECPpD,SAASC,IACtB,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,WAAS,KAAM,CACrDC,MAAO,IACPC,IAAK,SAEAC,EAAcC,IAAmBJ,EAAAA,EAAAA,UAAS,OAEjDK,EAAAA,EAAAA,YAAU,KACJ,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAUC,GAEd,OAAOA,EAAaC,YACjBC,kBACAH,MAAKI,eAAgBV,GAEpB,GAAIA,EACF,OAAOA,EAIT,MAAMW,QAAiBC,MAAM,oBAIvBC,EAtCpB,SAA+BC,GAO7B,IANA,IACIC,GAAUD,EADA,IAAIE,QAAQ,EAAKF,EAAaG,OAAS,GAAM,IACrBC,QAAQ,MAAO,KAAKA,QAAQ,KAAM,KAEpEC,EAAUC,OAAOC,KAAKN,GACtBO,EAAc,IAAIC,WAAWJ,EAAQF,QAEhCO,EAAI,EAAGA,EAAIL,EAAQF,SAAUO,EACpCF,EAAYE,GAAKL,EAAQM,WAAWD,GAEtC,OAAOF,EA4B+BI,OAHGf,EAASgB,QAOtC,OAAOpB,EAAaC,YAAYoB,UAAU,CACxCC,iBAAiB,EACjBC,qBAAsBjB,UAI7BP,MAAMN,GAAiBC,EAAgBD,OAE3C,KAEHE,EAAAA,EAAAA,YAAU,KACJF,GAEFY,MAAM,aAAc,CAClBmB,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBnC,aAAAA,QAIL,CAACA,IAEJ,MAAMoC,GAAoBC,EAAAA,EAAAA,cAAaC,IACrC,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAEG,OAC1B7C,GAAiBD,IAAY,IACxBA,EACH,CAAC4C,GAAOC,QAET,IAEGE,GAAyBL,EAAAA,EAAAA,cAAY,KACzC,MAAM,MAAEvC,EAAK,IAAEC,GAAQJ,EAIvBiB,MAAM,qBAAsB,CAC1BmB,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBnC,aAAAA,EACAF,MAAAA,EACAC,IAAAA,QAGH,CAACJ,EAAcK,IAElB,OACE,2BAAS2C,UAAWC,EAAAA,SAClB,kCACA,yGAIA,kDACsB,IACpB,yBACEC,GAAG,qBACHC,KAAK,SACLP,KAAK,QACLC,MAAO7C,EAAaG,MACpBiD,SAAUX,IACT,IAAG,qCAC6B,IACnC,yBACES,GAAG,mBACHC,KAAK,SACLP,KAAK,MACLC,MAAO7C,EAAaI,IACpBgD,SAAUX,IACT,IAAG,WAGR,0BAAQS,GAAG,OAAOG,QAASN,GAAuB,4B,8DC1HpDO,E,MAA0B,GAA4B,KAE1DA,EAAwBC,KAAK,CAACC,EAAON,GAAI,8FAA+F,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,+CAA+C,MAAQ,GAAG,SAAW,kDAAkD,eAAiB,CAAC,4GAA4G,WAAa,MAEraI,EAAwBG,OAAS,CAChC,QAAW,wBAEZ","sources":["webpack://@dev/web/./src/containers/Push.module.scss?b5da","webpack://@dev/web/./src/containers/Push.tsx","webpack://@dev/web/./src/containers/Push.module.scss"],"sourcesContent":["\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./Push.module.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./Push.module.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport styles from \"./Push.module.scss\";\n\n// This function is needed because Chrome doesn't accept a base64 encoded string\n// as value for applicationServerKey in pushManager.subscribe yet\n// https://bugs.chromium.org/p/chromium/issues/detail?id=802280\nfunction urlBase64ToUint8Array(base64String) {\n  var padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\n  var base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\");\n\n  var rawData = window.atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\nexport default function Section() {\n  const [notification, setNotification] = useState(() => ({\n    delay: \"5\",\n    ttl: \"0\",\n  }));\n  const [subscription, setSubscription] = useState(null);\n\n  useEffect(() => {\n    if (\"serviceWorker\" in navigator) {\n      navigator.serviceWorker.ready\n        .then(function (registration) {\n          // Use the PushManager to get the user's subscription to the push service.\n          return registration.pushManager\n            .getSubscription()\n            .then(async function (subscription) {\n              // If a subscription was found, return it.\n              if (subscription) {\n                return subscription;\n              }\n\n              // Get the server's public key\n              const response = await fetch(\"./vapidPublicKey\");\n              const vapidPublicKey = await response.text();\n              // Chrome doesn't accept the base64-encoded (string) vapidPublicKey yet\n              // urlBase64ToUint8Array() is defined in /tools.js\n              const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);\n\n              // Otherwise, subscribe the user (userVisibleOnly allows to specify that we don't plan to\n              // send notifications that don't have a visible effect for the user).\n              return registration.pushManager.subscribe({\n                userVisibleOnly: true,\n                applicationServerKey: convertedVapidKey,\n              });\n            });\n        })\n        .then((subscription) => setSubscription(subscription));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (subscription) {\n      // Send the subscription details to the server using the Fetch API.\n      fetch(\"./register\", {\n        method: \"post\",\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          subscription,\n        }),\n      });\n    }\n  }, [subscription]);\n\n  const handleChangeValue = useCallback((e) => {\n    const { name, value } = e.target;\n    setNotification((notification) => ({\n      ...notification,\n      [name]: value,\n    }));\n  }, []);\n\n  const handleSendNotification = useCallback(() => {\n    const { delay, ttl } = notification;\n    // Ask the server to send the client a notification (for testing purposes, in actual\n    // applications the push notification is likely going to be generated by some event\n    // in the server).\n    fetch(\"./sendNotification\", {\n      method: \"post\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        subscription,\n        delay,\n        ttl,\n      }),\n    });\n  }, [notification, subscription]);\n\n  return (\n    <section className={styles.Section}>\n      <h2>Push</h2>\n      <p>\n        This demo shows how to register for push notifications and how to send\n        them.\n      </p>\n      <form>\n        Notification delay:{\" \"}\n        <input\n          id=\"notification-delay\"\n          type=\"number\"\n          name=\"delay\"\n          value={notification.delay}\n          onChange={handleChangeValue}\n        />{\" \"}\n        seconds Notification Time-To-Live:{\" \"}\n        <input\n          id=\"notification-ttl\"\n          type=\"number\"\n          name=\"ttl\"\n          value={notification.ttl}\n          onChange={handleChangeValue}\n        />{\" \"}\n        seconds\n      </form>\n      <button id=\"doIt\" onClick={handleSendNotification}>\n        Try to conquer Italy!\n      </button>\n    </section>\n  );\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".tjNCk8qW9Vs65hlz4WRw{color:blue;font-family:monospace;font-size:1rem;white-space:pre-wrap}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/containers/Push.module.scss\"],\"names\":[],\"mappings\":\"AAAA,sBACE,UAAA,CACA,qBAAA,CACA,cAAA,CACA,oBAAA\",\"sourcesContent\":[\".Section {\\n  color: blue;\\n  font-family: monospace;\\n  font-size: 1rem;\\n  white-space: pre-wrap;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"Section\": \"tjNCk8qW9Vs65hlz4WRw\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n"],"names":["options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","undefined","Section","notification","setNotification","useState","delay","ttl","subscription","setSubscription","useEffect","navigator","serviceWorker","ready","then","registration","pushManager","getSubscription","async","response","fetch","convertedVapidKey","base64String","base64","repeat","length","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","urlBase64ToUint8Array","text","subscribe","userVisibleOnly","applicationServerKey","method","headers","body","JSON","stringify","handleChangeValue","useCallback","e","name","value","target","handleSendNotification","className","styles","id","type","onChange","onClick","___CSS_LOADER_EXPORT___","push","module","locals"],"sourceRoot":""}