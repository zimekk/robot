{"version":3,"file":"sw.js","mappings":"mBASAA,KAAKC,iBAAiB,QAAQ,SAAUC,GAEtCA,EAAMC,UAEJH,KAAKI,aAAaC,iBAAiB,yBAA0B,CAC3DC,KAAM,uBAMZN,KAAKC,iBAAiB,WAAW,SAAUC,GACzCA,EAAMC,UAEJH,KAAKI,aAAaC,iBAAiB,yBAA0B,CAC3DC,KAAMJ,EAAMK,QAIhB,MAAMC,EAAUR,KAAKS,QAAQC,WAAWC,MAAK,SAAUC,GAErD,MAAMC,EAAWX,EAAMY,OAAOC,GAC9BH,EAAWI,SAAQ,SAAUC,GAEvBA,EAAOF,KAAOF,GAGlBI,EAAOC,YAAY,CACjBD,OAAQJ,EACRM,QAASjB,EAAMK,aAKjBL,EAAMC,WACRD,EAAMC,UAAUK,MAIpBR,KAAKC,iBAAiB,YAAY,SAAUC,GAC1CA,EAAMC,UAAUH,KAAKS,QAAQW,a","sources":["webpack://@dev/web/./src/service-worker.ts"],"sourcesContent":["/// <reference lib=\"webworker\" />\n\n// https://stackoverflow.com/questions/63116331/how-to-migrate-service-worker-from-js-to-ts\n/* eslint-disable no-redeclare */\ndeclare var self: ServiceWorkerGlobalScope;\n\nexport {};\n\n// Register event listener for the 'push' event.\nself.addEventListener(\"push\", function (event) {\n  // Keep the service worker alive until the notification is created.\n  event.waitUntil(\n    // Show a notification with title 'ServiceWorker Cookbook' and body 'Alea iacta est'.\n    self.registration.showNotification(\"ServiceWorker Cookbook\", {\n      body: \"Alea iacta est\",\n    })\n  );\n});\n\n// https://serviceworke.rs/message-relay_index_doc.html\nself.addEventListener(\"message\", function (event) {\n  event.waitUntil(\n    // Show a notification with title 'ServiceWorker Cookbook' and body 'Alea iacta est'.\n    self.registration.showNotification(\"ServiceWorker Cookbook\", {\n      body: event.data,\n    })\n  );\n  // Get all the connected clients and forward the message along.\n  const promise = self.clients.matchAll().then(function (clientList) {\n    // event.source.id contains the ID of the sender of the message.\n    const senderID = event.source.id;\n    clientList.forEach(function (client) {\n      // Skip sending the message to the client that sent it.\n      if (client.id === senderID) {\n        return;\n      }\n      client.postMessage({\n        client: senderID,\n        message: event.data,\n      });\n    });\n  });\n  // If event.waitUntil is defined, use it to extend the lifetime of the Service Worker.\n  if (event.waitUntil) {\n    event.waitUntil(promise);\n  }\n});\n\nself.addEventListener(\"activate\", function (event) {\n  event.waitUntil(self.clients.claim());\n});\n"],"names":["self","addEventListener","event","waitUntil","registration","showNotification","body","data","promise","clients","matchAll","then","clientList","senderID","source","id","forEach","client","postMessage","message","claim"],"sourceRoot":""}